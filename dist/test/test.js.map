{
  "version": 3,
  "sources": [
    "../../src/test/test.js"
  ],
  "names": [],
  "mappings": ";;AAIA;;AAEA;;AACA;;;;AACA;;;;;;;;;;AAEA,OAAO,UAAS,IAAT,EAAe;AACpB,MAAI,OAAO,IAAI,IAAf;AACA,MAAI,UAAU,OAAO,IAArB;AACA,OAAK,OAAL,CAAa,OAAb;;AAEA,UAAQ,GAAR,CAAa,uBAAqB,OAAO,IAAK,wDAA9C;AACA,aAAW,MAAM;AACf,YAAQ,GAAR,CAAY,gBAAZ;AACA;AACD,GAHD,EAGG,IAHH;AAID,CAVD;;AAYA,SAAS,aAAT,EAAwB,YAAW;AACjC,MAAI,QAAQ,eAAZ;AACA,MAAI,UAAU,OAAd;AACA,MAAI,UAAU;AACZ,sBAAkB,gBADN;AAEZ,cAAU,kBAAI;AAFF,GAAd;;AAKA,KAAG,mCAAH,oBAAwC,aAAiB;AACvD,SAAK,OAAL,CAAa,KAAK,IAAlB;AACA,QAAI,WAAW,oBAAkB,OAAlB,CAAf;;AAEA,UAAM,SAAS,SAAT,EAAN;AACA,0BAAO,SAAS,QAAT,CAAkB,KAAzB;AACA,QAAI,SAAS,MAAM,SAAS,WAAT,CAAqB,KAArB,CAAnB;AACA,qBAAO,KAAP,CAAa,MAAb,EAAqB,mBAArB;;AAEA,UAAM,SAAS,WAAT,CAAqB,KAArB,EAA4B,OAA5B,CAAN;AACA,UAAM,SAAS,KAAT,EAAN;;AAEA,QAAI,WAAW,CAAC;AACd,aAAO;AADO,KAAD,CAAf;AAGA,QAAI,WAAW,oBAAkB,QAAlB,EAA4B,OAA5B,CAAf;AACA,QAAI,WAAW,MAAM,SAAS,WAAT,EAArB;AACA,qBAAO,KAAP,CAAa,SAAS,KAAtB,EAA6B,KAA7B;AACA,qBAAO,KAAP,CAAa,SAAS,KAAtB,EAA6B,OAA7B;AACA,UAAM,SAAS,KAAT,EAAN;AACD,GApBD;AAqBD,CA7BD",
  "file": "test.js",
  "sourcesContent": [
    "// disable for mocha tests\n/* eslint-disable no-invalid-this */\n/* eslint-disable no-console */\n\nimport 'source-map-support/register';\n\nimport { KafkaConsumer, KafkaProducer } from '..'\nimport assert from 'assert';\nimport pkg from '../../package.json'\n\nbefore(function(done) {\n  let wait = 9 * 1000\n  let timeout = wait + 1000\n  this.timeout(timeout)\n\n  console.log(`test will wait for ${wait / 1000} seconds to give services time to finish initializing`)\n  setTimeout(() => {\n    console.log('starting tests')\n    done()\n  }, wait)\n})\n\ndescribe('kafka tests', function() {\n  let topic = 'service-start'\n  let message = 'hello'\n  let options = {\n    connectionString: 'zookeeper:2181',\n    clientId: pkg.name\n  }\n\n  it('should send and receive a message', async function() {\n    this.timeout(10 * 1000)\n    let producer = new KafkaProducer(options)\n\n    await producer.waitReady()\n    assert(producer.producer.ready)\n    let result = await producer.createTopic(topic)\n    assert.equal(result, 'All requests sent')\n\n    await producer.sendMessage(topic, message)\n    await producer.close()\n\n    let payloads = [{\n      topic: topic\n    }]\n    let consumer = new KafkaConsumer(payloads, options)\n    let received = await consumer.waitMessage()\n    assert.equal(received.topic, topic)\n    assert.equal(received.value, message)\n    await consumer.close()\n  })\n})\n"
  ]
}