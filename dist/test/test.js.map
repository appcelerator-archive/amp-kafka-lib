{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAIA;;AACA;;AAEA;;AACA;;;;AACA;;;;;;AAEA,OAAO,UAAS,IAAT,EAAe;AACpB,MAAI,OAAO,IAAI,IAAf;AACA,MAAI,UAAU,OAAO,IAArB;AACA,OAAK,OAAL,CAAa,OAAb;;AAEA,UAAQ,GAAR,yBAAkC,OAAO,IAAzC;AACA,aAAW,YAAM;AACf,YAAQ,GAAR,CAAY,gBAAZ;AACA;AACD,GAHD,EAGG,IAHH;AAID,CAVD,E;;;;AAYA,SAAS,aAAT,EAAwB,YAAW;AACjC,MAAI,QAAQ,eAAZ;AACA,MAAI,UAAU,OAAd;AACA,MAAI,UAAU;AACZ,sBAAkB,gBADN;AAEZ,cAAU,kBAAI;AAFF,GAAd;;AAKA,KAAG,mCAAH,EAAwC;AAAA,QAElC,QAFkC,EAMlC,MANkC,EAYlC,QAZkC,EAelC,QAfkC,EAgBlC,QAhBkC;AAAA;AAAA;AAAA;AAAA;AACtC,iBAAK,OAAL,CAAa,KAAK,IAAlB;AACI,oBAFkC,GAEvB,oBAAkB,OAAlB,CAFuB;AAAA;AAAA,4CAIhC,SAAS,SAAT,EAJgC;;AAAA;AAKtC,kCAAO,SAAS,QAAT,CAAkB,KAAzB;AALsC;AAAA,4CAMnB,SAAS,WAAT,CAAqB,KAArB,CANmB;;AAAA;AAMlC,kBANkC;;AAOtC,6BAAO,KAAP,CAAa,MAAb,EAAqB,mBAArB;;AAPsC;AAAA,4CAShC,SAAS,WAAT,CAAqB,KAArB,EAA4B,OAA5B,CATgC;;AAAA;AAAA;AAAA,4CAUhC,SAAS,KAAT,EAVgC;;AAAA;AAYlC,oBAZkC,GAYvB,CAAC;AACd,qBAAO;AADO,aAAD,CAZuB;AAelC,oBAfkC,GAevB,oBAAkB,QAAlB,EAA4B,OAA5B,CAfuB;AAAA;AAAA,4CAgBjB,SAAS,WAAT,EAhBiB;;AAAA;AAgBlC,oBAhBkC;;AAiBtC,6BAAO,KAAP,CAAa,SAAS,KAAtB,EAA6B,KAA7B;AACA,6BAAO,KAAP,CAAa,SAAS,KAAtB,EAA6B,OAA7B;AAlBsC;AAAA,4CAmBhC,SAAS,KAAT,EAnBgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;AAqBD,CA7BD","file":"test.js","sourcesContent":["// disable for mocha tests\n/* eslint-disable no-invalid-this */\n/* eslint-disable no-console */\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport { KafkaConsumer, KafkaProducer } from '..'\nimport assert from 'assert';\nimport pkg from '../../package.json'\n\nbefore(function(done) {\n  let wait = 9 * 1000\n  let timeout = wait + 1000\n  this.timeout(timeout)\n\n  console.log(`test will wait for ${wait / 1000} seconds to give services time to finish initializing`)\n  setTimeout(() => {\n    console.log('starting tests')\n    done()\n  }, wait)\n})\n\ndescribe('kafka tests', function() {\n  let topic = 'service-start'\n  let message = 'hello'\n  let options = {\n    connectionString: 'zookeeper:2181',\n    clientId: pkg.name\n  }\n\n  it('should send and receive a message', async function() {\n    this.timeout(10 * 1000)\n    let producer = new KafkaProducer(options)\n\n    await producer.waitReady()\n    assert(producer.producer.ready)\n    let result = await producer.createTopic(topic)\n    assert.equal(result, 'All requests sent')\n\n    await producer.sendMessage(topic, message)\n    await producer.close()\n\n    let payloads = [{\n      topic: topic\n    }]\n    let consumer = new KafkaConsumer(payloads, options)\n    let received = await consumer.waitMessage()\n    assert.equal(received.topic, topic)\n    assert.equal(received.value, message)\n    await consumer.close()\n  })\n})\n"]}