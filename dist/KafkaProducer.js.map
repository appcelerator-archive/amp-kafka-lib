{
  "version": 3,
  "sources": [
    "../src/KafkaProducer.js"
  ],
  "names": [],
  "mappings": ";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEe,MAAM,aAAN,yBAAkC;;AAE/C,cAAY,aAAZ,EAA2B,eAA3B,EAA4C;AAC1C,UAAM,aAAN;;AAEA,SAAK,QAAL,GAAgB,iCAAsB,KAAK,MAA3B,EAAmC,eAAnC,CAAhB;;;AAGA,SAAK,UAAL,GAAkB,yBAAU,KAAK,MAAL,CAAY,KAAtB,CAAlB;;;AAGA,SAAK,QAAL,CAAc,UAAd,GAA2B,yBAAU,KAAK,QAAL,CAAc,KAAxB,CAA3B;AACA,SAAK,QAAL,CAAc,iBAAd,GAAkC,yBAAU,KAAK,QAAL,CAAc,YAAxB,CAAlC;AACA,SAAK,QAAL,CAAc,SAAd,GAA0B,yBAAU,KAAK,QAAL,CAAc,IAAxB,CAA1B;;;AAGA,QAAI,SAAS,CAAC,OAAD,EAAU,OAAV,CAAb;AACA,WAAO,OAAP,CAAe,SAAS;AACtB,WAAK,QAAL,CAAc,EAAd,CAAiB,KAAjB,EAAwB,CAAC,GAAG,IAAJ,KAAa;AACnC,aAAK,IAAL,CAAU,KAAV,EAAiB,GAAG,IAApB;AACD,OAFD;AAGD,KAJD;AAKD;;AAEK,OAAN,GAAc;AAAA;;AAAA;AACZ,YAAM,MAAK,QAAL,CAAc,UAAd,EAAN;AADY;AAEb;;AAEK,aAAN,CAAkB,KAAlB,EAAyB;AAAA;;AAAA;AACvB,aAAO,MAAM,OAAK,YAAL,CAAkB,CAAC,KAAD,CAAlB,CAAb;AADuB;AAExB;;AAEK,cAAN,CAAmB,MAAnB,EAA2B;AAAA;;AAAA;AACzB,aAAO,MAAM,OAAK,QAAL,CAAc,iBAAd,CAAgC,MAAhC,EAAwC,IAAxC,CAAb;AADyB;AAE1B;;;AAGK,MAAN,CAAW,QAAX,EAAqB;AAAA;;AAAA;AACnB,aAAO,MAAM,OAAK,QAAL,CAAc,SAAd,CAAwB,QAAxB,CAAb;AADmB;AAEpB;;;AAGK,aAAN,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC,GAAlC,EAAuC,UAAvC,EAAmD;AAAA;;AAAA;AACjD,UAAI,WAAW,CAAC;AACd,eAAO,KADO;AAEd,kBAAU;AAFI,OAAD,CAAf;;AAKA,UAAI,GAAJ,EAAS;AACP,iBAAS,GAAT,GAAe,GAAf;AACD;;AAED,UAAI,UAAJ,EAAgB;AACd,iBAAS,UAAT,GAAsB,UAAtB;AACD;;AAED,aAAO,MAAM,OAAK,IAAL,CAAU,QAAV,CAAb;AAdiD;AAelD;;AAED,cAAY;AACV,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACtC,WAAK,QAAL,CAAc,EAAd,CAAiB,OAAjB,EAA0B,OAA1B;AACA,WAAK,QAAL,CAAc,EAAd,CAAiB,OAAjB,EAA0B,MAA1B;AACD,KAHM,CAAP;AAID;;AAhE8C;kBAA5B,a",
  "file": "KafkaProducer.js",
  "sourcesContent": [
    "import { HighLevelProducer } from 'kafka-node';\nimport Kafka from './Kafka';\nimport { promisify } from 'bluebird';\n\nexport default class KafkaProducer extends Kafka {\n\n  constructor(clientOptions, producerOptions) {\n    super(clientOptions)\n\n    this.producer = new HighLevelProducer(this.client, producerOptions)\n\n    // promisify client close\n    this.closeAsync = promisify(this.client.close)\n\n    // promisify producer functions\n    this.producer.closeAsync = promisify(this.producer.close)\n    this.producer.createTopicsAsync = promisify(this.producer.createTopics)\n    this.producer.sendAsync = promisify(this.producer.send)\n\n    // delegate producer events\n    let events = ['ready', 'error']\n    events.forEach(event => {\n      this.producer.on(event, (...args) => {\n        this.emit(event, ...args)\n      })\n    })\n  }\n\n  async close() {\n    await this.producer.closeAsync()\n  }\n\n  async createTopic(topic) {\n    return await this.createTopics([topic])\n  }\n\n  async createTopics(topics) {\n    return await this.producer.createTopicsAsync(topics, true)\n  }\n\n  // see: https://github.com/SOHU-Co/kafka-node#sendpayloads-cb-1\n  async send(payloads) {\n    return await this.producer.sendAsync(payloads)\n  }\n\n  // see: https://github.com/SOHU-Co/kafka-node#sendpayloads-cb-1\n  async sendMessage(topic, message, key, attributes) {\n    let payloads = [{\n      topic: topic,\n      messages: message\n    }]\n\n    if (key) {\n      payloads.key = key\n    }\n\n    if (attributes) {\n      payloads.attributes = attributes\n    }\n\n    return await this.send(payloads)\n  }\n\n  waitReady() {\n    return new Promise((resolve, reject) => {\n      this.producer.on('ready', resolve)\n      this.producer.on('error', reject)\n    })\n  }\n\n}\n"
  ]
}