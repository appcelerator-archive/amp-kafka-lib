{"version":3,"sources":["KafkaProducer.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;IAEqB,a;;;AAEnB,yBAAY,aAAZ,EAA2B,eAA3B,EAA4C;AAAA;;AAAA,iGACpC,aADoC;;AAG1C,UAAK,QAAL,GAAgB,iCAAsB,MAAK,MAA3B,EAAmC,eAAnC,CAAhB;;;AAGA,UAAK,UAAL,GAAkB,yBAAU,MAAK,MAAL,CAAY,KAAtB,CAAlB;;;AAGA,UAAK,QAAL,CAAc,UAAd,GAA2B,yBAAU,MAAK,QAAL,CAAc,KAAxB,CAA3B;AACA,UAAK,QAAL,CAAc,iBAAd,GAAkC,yBAAU,MAAK,QAAL,CAAc,YAAxB,CAAlC;AACA,UAAK,QAAL,CAAc,SAAd,GAA0B,yBAAU,MAAK,QAAL,CAAc,IAAxB,CAA1B;;;AAGA,QAAI,SAAS,CAAC,OAAD,EAAU,OAAV,CAAb;AACA,WAAO,OAAP,CAAe,iBAAS;AACtB,YAAK,QAAL,CAAc,EAAd,CAAiB,KAAjB,EAAwB,YAAa;AAAA,0CAAT,IAAS;AAAT,cAAS;AAAA;;AACnC,cAAK,IAAL,eAAU,KAAV,SAAoB,IAApB;AACD,OAFD;AAGD,KAJD;AAf0C;AAoB3C;;;;;;;;;;8CAGO,KAAK,QAAL,CAAc,UAAd,E;;;;;;;;;;;gCAGU,K;;;;;;8CACH,KAAK,YAAL,CAAkB,CAAC,KAAD,CAAlB,C;;;;;;;;;;;;;;iCAGI,M;;;;;;8CACJ,KAAK,QAAL,CAAc,iBAAd,CAAgC,MAAhC,EAAwC,IAAxC,C;;;;;;;;;;;;;;;;;yBAIJ,Q;;;;;;8CACI,KAAK,QAAL,CAAc,SAAd,CAAwB,QAAxB,C;;;;;;;;;;;;;;;;;gCAIG,K,EAAO,O,EAAS,G,EAAK,U;UACjC,Q;;;;;AAAA,sB,GAAW,CAAC;AACd,uBAAO,KADO;AAEd,0BAAU;AAFI,eAAD,C;;;AAKf,kBAAI,GAAJ,EAAS;AACP,yBAAS,GAAT,GAAe,GAAf;AACD;;AAED,kBAAI,UAAJ,EAAgB;AACd,yBAAS,UAAT,GAAsB,UAAtB;AACD;;;8CAEY,KAAK,IAAL,CAAU,QAAV,C;;;;;;;;;;;;;;gCAGH;AAAA;;AACV,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,QAAL,CAAc,EAAd,CAAiB,OAAjB,EAA0B,OAA1B;AACA,eAAK,QAAL,CAAc,EAAd,CAAiB,OAAjB,EAA0B,MAA1B;AACD,OAHM,CAAP;AAID;;;;;;kBAhEkB,a","file":"KafkaProducer.js","sourcesContent":["import { HighLevelProducer } from 'kafka-node'\nimport Kafka from './Kafka'\nimport { promisify } from 'bluebird'\n\nexport default class KafkaProducer extends Kafka {\n\n  constructor(clientOptions, producerOptions) {\n    super(clientOptions)\n\n    this.producer = new HighLevelProducer(this.client, producerOptions)\n\n    // promisify client close\n    this.closeAsync = promisify(this.client.close)\n\n    // promisify producer functions\n    this.producer.closeAsync = promisify(this.producer.close)\n    this.producer.createTopicsAsync = promisify(this.producer.createTopics)\n    this.producer.sendAsync = promisify(this.producer.send)\n\n    // delegate producer events\n    let events = ['ready', 'error']\n    events.forEach(event => {\n      this.producer.on(event, (...args) => {\n        this.emit(event, ...args)\n      })\n    })\n  }\n\n  async close() {\n    await this.producer.closeAsync()\n  }\n\n  async createTopic(topic) {\n    return await this.createTopics([topic])\n  }\n\n  async createTopics(topics) {\n    return await this.producer.createTopicsAsync(topics, true)\n  }\n\n  // see: https://github.com/SOHU-Co/kafka-node#sendpayloads-cb-1\n  async send(payloads) {\n    return await this.producer.sendAsync(payloads)\n  }\n\n  // see: https://github.com/SOHU-Co/kafka-node#sendpayloads-cb-1\n  async sendMessage(topic, message, key, attributes) {\n    let payloads = [{\n      topic: topic,\n      messages: message,\n    }]\n\n    if (key) {\n      payloads.key = key\n    }\n\n    if (attributes) {\n      payloads.attributes = attributes\n    }\n\n    return await this.send(payloads)\n  }\n\n  waitReady() {\n    return new Promise((resolve, reject) => {\n      this.producer.on('ready', resolve)\n      this.producer.on('error', reject)\n    })\n  }\n\n}\n"]}